"use strict";

var _ = require('dry-underscore');

var access_manager_class = require('./access_manager.js');

var eq = _.test.eq;
var ok = _.test.ok;

suite('access_manager');

function test_access_manager(callback){

    var generated_token = null;
    var access_manager = new access_manager_class();

    var token = null;
    await{ access_manager.create("admin_token", null, ['user', 'admin'], { extra: "admin" }, _.plumb(defer(token), callback)); }
    eq(token, "admin_token");

    await{ access_manager.create("user_token", null, ['user'], { extra: "user" }, _.plumb(defer(token), callback)); }
    eq(token, "user_token");

    await{ access_manager.create("expired", _.timestamp()-100, [], { extra: "expired" }, _.plumb(defer(token), callback)); }
    eq(token, "expired");

    generated_token = { expires: _.timestamp() + 500 };

    await{ access_manager.create(null, generated_token.expires, [], { extra: "generated_token" }, _.plumb(defer(token), callback)); }
    ok(token);
    eq(token.length, 172);
    generated_token.access_token = token;

    return callback(null, access_manager, generated_token);

};

test("get admin", function(done){

    await{ test_access_manager(defer(var err, manager)); }
    if(err){ return done(err); }

    var context = null;
    var expired = null;

    await{ manager.get("admin_token", _.plumb(defer(context, expired), done)); }
    eq(expired, false);
    eq(context, { access_token: "admin_token", roles: ['user', 'admin'], extra: 'admin', expires: null });

    await{ manager.extend("admin_token", { access_token: "new_admin_token", extra_foo: "foo" }, _.plumb(defer(var access_token, created), done)); }
    eq(access_token, "admin_token");
    eq(created, false);

    await{ manager.get("admin_token", _.plumb(defer(var context, expired), done)); }
    eq(context, { access_token: "admin_token", roles: ['user', 'admin'], extra: 'admin', extra_foo: "foo", expires: null });

    done();
});

test("get user", function(done){

    await{ test_access_manager(defer(var err, manager)); }
    if(err){ return done(err); }

    await{ manager.get("user_token", _.plumb(defer(var context, expired), done)); }

    eq(expired, false);
    eq(context, { access_token: "user_token", roles: ['user'], extra: 'user', expires: null });

    done();
});

test("get none", function(done){

    await{ test_access_manager(defer(var err, manager)); }
    if(err){ return done(err); }

    await{ manager.get("", _.plumb(defer(var context), done)); }

    eq(context, null);

    done();
});

test("get generated", function(done){

    await{ test_access_manager(defer(var err, manager, generated_token)); }
    if(err){ return done(err); }

    var context = null;
    var expired = null;
    await{ manager.get(generated_token.access_token, _.plumb(defer(context, expired), done)); }

    eq(expired, false);
    eq(context, { access_token: generated_token.access_token, roles: [], extra: 'generated_token', expires: generated_token.expires });

    await{ setTimeout(defer(), 501); }

    await{ manager.get(generated_token.access_token, _.plumb(defer(context, expired), done)); }
    eq(expired, true);
    eq(context, null);

    done();
});

